{"data":{"site":{"siteMetadata":{"author":{"name":"박재성","contacts":{"twitter":"#"}},"disqusShortname":"","subtitle":"건설환경공학을 전공하는 개발자. 스타트업에 도전하는 것과 새로운 기술들을 공부하는 것을 사랑합니다.","title":"Blog by ParkJaesung","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"ebb1fa7e-dd26-571b-9b8c-122f8671f0e4","html":"<p>MQTT는 M2M, IOT를 위한 프로토콜로서, 최소한의 전력과 패킷량으로 통신하는 프로토콜입니다. 따라서 IOT와 모바일 어플리케이션 등의 통신에 매우 적합한 프로토콜입니다. </p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> MQTT는 HTTP, TCP등의 통신과 같이 클라이언트-서버 구조로 이루어지는 것이 아닌, Broker, Publisher, Subscriber 구조로 이루어집니다. </li>\n</ul>\n<p><img src=\"/media/mqtt-basic/s213hU6yIRQ6qHiYBgip1kg.png\"></p>\n<p>Publisher는 Topic을 발행(publish) 하고, Subscriber는 Topic에 구독(subscribe)합니다. Broker는 이들을 중계하는 역할을 하며, 단일 Topic에 여러 Subscriber가 구독할 수 있기 때문에, 1:N 통신 구축에도 매우 유용합니다. </p>\n<p>MQTT에서 Topic은 /를 사용해서 구성된다.\n<img src=\"/media/mqtt-basic/Example-of-MQTT-topic-tree.png\"></p>\n<p>따라서 위와 같이 계층을 구성한다면, IOT 센서와 같은 데이터를 관리하기에 매우 용이합니다.</p>\n<p>MQTT는 QoS(Quality of Service)를 제공하는데, 총 3단계로 나뉘어져 있습니다. </p>\n<ul>\n<li>0 : 메세지는 한번만 전달되며, 전달이후의 수신과정을 체크하지 않는다. </li>\n<li>1 : 메세지는 한번 이상 전달되고, 핸드셰이킹 과정을 추적하나, 엄격하게 추적하지 않기 때문에 중복수신의 가능성이 있다.</li>\n<li>2 : 메세지는 한번만 전달되고, 핸드셰이킹의 모든 과정을 체크한다. </li>\n</ul>\n<p>QoS의 단계가 높아질 수록 통신의 품질은 향상되지만, 그에 따라 성능 저하의 가능성이 있으므로. MQTT의 QoS는 프로젝트의 특성에 따라 결정되어야 합니다.</p>\n<h2 id=\"mqtt-브로커-구동하기\"><a href=\"#mqtt-%EB%B8%8C%EB%A1%9C%EC%BB%A4-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"mqtt 브로커 구동하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MQTT 브로커 구동하기</h2>\n<p>MQTT 프로토콜을 구현하는 브로커들은 아래와 같이 여러 것들이 있습니다. </p>\n<ul>\n<li>Mosquitto</li>\n<li>HiveMQ</li>\n<li>mosca</li>\n<li>ActiveMQ</li>\n<li>RabbitMQ (Plug-in 형태로 지원)</li>\n</ul>\n<p>그 중에서도 유명한 브로커 중 하나인 Mosquitto를 사용해봅시다. </p>\n<p>간편하게 실행하기 위해 docker로 실행해보도록 하겠습니다!\n공식 이미지 링크 : <a href=\"https://hub.docker.com/_/eclipse-mosquitto?tab=description\">https://hub.docker.com/_/eclipse-mosquitto?tab=description</a></p>\n<p>docker을 실행하고, 아래와 같이 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker run -it -p 1883:1883 -p 9001:9001 -v /mosquitto/data -v /mosquitto/log eclipse-mosquitto</code></pre></div>\n<p><img src=\"/media/mqtt-basic/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-05-03%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%203.17.31.png\">\n(도커로 Mosquitto 구동 결과)</p>\n<p>MQTT-Explorer 라는 툴을 이용해 topic에 publish하고, Python에서 subscribe하여 데이터를 가져오는 예제를 실행해보도록 하곘습니다. </p>\n<p><a href=\"https://mqtt-explorer.com\">MQTT Explorer | An all-round MQTT client that provides a structured topic overview</a></p>\n<p><img src=\"/media/mqtt-basic/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-05-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.15.26.png\">\nMQTT Explorer로 도커로 구동한 브로커 127.0.0.1:1833에 접속하였고, /test/1 topic에 데이터를 publish합니다.</p>\n<p>Python 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> paho<span class=\"token punctuation\">.</span>mqtt<span class=\"token punctuation\">.</span>client <span class=\"token keyword\">as</span> mqtt\n\n<span class=\"token comment\"># The callback for when the client receives a CONNACK response from the server.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">on_connect</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>“Connected <span class=\"token keyword\">with</span> result code “<span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Subscribing in on_connect() means that if we lose the connection and</span>\n    <span class=\"token comment\"># reconnect then subscriptions will be renewed.</span>\n    client<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span>“<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span><span class=\"token number\">1</span>”<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Topic /seoul/yuokok을 구독한다.</span>\n\n<span class=\"token comment\"># The callback for when a PUBLISH message is received from the server.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>topic<span class=\"token operator\">+</span>” “<span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nclient <span class=\"token operator\">=</span> mqtt<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>on_connect <span class=\"token operator\">=</span> on_connect\nclient<span class=\"token punctuation\">.</span>on_message <span class=\"token operator\">=</span> on_message\n\nclient<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>“<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>”<span class=\"token punctuation\">)</span> <span class=\"token comment\"># - 서버 IP ‘테스트를 위해 test.mosquitto.org’로 지정</span>\n\n<span class=\"token comment\"># Blocking call that processes network traffic, dispatches callbacks and</span>\n<span class=\"token comment\"># handles reconnecting.</span>\n<span class=\"token comment\"># Other loop*() functions are available that give a threaded interface and a</span>\n<span class=\"token comment\"># manual interface.</span>\nclient<span class=\"token punctuation\">.</span>loop_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Python에서는 Paho 패키지를 사용하여 MQTT 브로커에 접속할 수 있고, /test/1 topic에 subscribe를 하였습니다. </p>\n<p><img src=\"/media/mqtt-basic/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-05-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.17.11.png\">\n(MQTT Explorer에서 publish한 결과) </p>\n<p><img src=\"/media/mqtt-basic/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-05-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%202.17.19.png\">\n(Python에서 subscribe한 데이터를 가져온 결과)</p>","fields":{"slug":"/posts/mqtt-basic/","tagSlugs":["/tag/mqtt/","/tag/io-t/","/tag/server/"]},"frontmatter":{"date":"2019-05-06T22:40:32.169Z","description":"MQTT의 기본 공부하기","tags":["MQTT","IoT","server"],"title":"MQTT란?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/mqtt-basic/"}}